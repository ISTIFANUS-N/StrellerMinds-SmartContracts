name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test --all --verbose

  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-
      
      - name: Run cargo audit
        uses: taiki-e/cargo-audit-action@v1
        with:
          deny-warnings: true

      - name: Shell Lint
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Install ShellCheck
            run: sudo apt-get update && sudo apt-get install -y shellcheck
          - name: Install shfmt
            run: sudo apt-get update && sudo apt-get install -y shfmt
          - name: Run ShellCheck
            run: shellcheck scripts/*.sh
          - name: Run shfmt check
            run: shfmt -d scripts/*.sh

  wasm-check:
    name: WASM Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-
            ${{ runner.os }}-cargo-
      
      - name: Build for WASM target
        run: cargo build --all --target wasm32-unknown-unknown --verbose

  # Per-contract WASM build matrix - isolates build/test failures per contract
  contract-matrix:
    name: Contract ${{ matrix.contract }}
    runs-on: ubuntu-latest
    strategy:
      # Don't cancel all jobs if one fails - we want to see all failures
      fail-fast: false
      matrix:
        contract:
          - analytics
          - certificate
          - mint-batch-certificates
          - mobile-optimizer
          - progress
          - proxy
          - search
          - student-progress-tracker
          - token
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-contract-${{ matrix.contract }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-contract-${{ matrix.contract }}-
            ${{ runner.os }}-cargo-
      
      - name: Run ${{ matrix.contract }} tests
        run: |
          echo "Testing contract: ${{ matrix.contract }}"
          cargo test --package ${{ matrix.contract }} --verbose
      
      - name: Build ${{ matrix.contract }} for native target
        run: |
          echo "Building contract: ${{ matrix.contract }} for native target"
          cargo build --package ${{ matrix.contract }} --release
      
      - name: Build ${{ matrix.contract }} for WASM target
        run: |
          echo "Building contract: ${{ matrix.contract }} for WASM target"
          cargo build --package ${{ matrix.contract }} --target wasm32-unknown-unknown --release --lib || {
            echo "::warning::WASM build failed for ${{ matrix.contract }}. This may indicate missing no_std compatibility."
            exit 1
          }
      
      - name: Check ${{ matrix.contract }} contract size
        if: success()
        run: |
          WASM_FILE="target/wasm32-unknown-unknown/release/${{ matrix.contract }}.wasm"
          if [ -f "$WASM_FILE" ]; then
            SIZE=$(stat -f%z "$WASM_FILE" 2>/dev/null || stat -c%s "$WASM_FILE" 2>/dev/null || echo "0")
            echo "üì¶ Contract size: $(numfmt --to=iec-i --suffix=B $SIZE 2>/dev/null || echo ${SIZE}B)"
            echo "contract_size=$SIZE" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  WASM file not found at $WASM_FILE"
          fi
        id: size_check

  dependency-check:
    name: Dependency Version Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check workspace dependency usage
        run: |
          echo "Checking that all contracts use workspace dependencies..."
          
          # Check for hardcoded soroban-sdk versions
          if grep -r 'soroban-sdk = "[0-9]' contracts/*/Cargo.toml; then
            echo "‚ùå Found hardcoded soroban-sdk versions in contract Cargo.toml files"
            echo "All contracts should use: soroban-sdk = { workspace = true }"
            exit 1
          fi
          
          # Check for hardcoded stellar-strkey versions
          if grep -r 'stellar-strkey = "[0-9]' contracts/*/Cargo.toml; then
            echo "‚ùå Found hardcoded stellar-strkey versions in contract Cargo.toml files"
            echo "All contracts should use: stellar-strkey = { workspace = true }"
            exit 1
          fi
          
          # Check for hardcoded ed25519-dalek versions
          if grep -r 'ed25519-dalek = "[0-9]' contracts/*/Cargo.toml; then
            echo "‚ùå Found hardcoded ed25519-dalek versions in contract Cargo.toml files"
            echo "All contracts should use: ed25519-dalek = { workspace = true }"
            exit 1
          fi
          
          # Check for hardcoded rand versions
          if grep -r 'rand = "[0-9]' contracts/*/Cargo.toml; then
            echo "‚ùå Found hardcoded rand versions in contract Cargo.toml files"
            echo "All contracts should use: rand = { workspace = true }"
            exit 1
          fi
          
          # Verify all contracts use workspace = true for soroban-sdk
          echo "Verifying all contracts use workspace dependencies..."
          for cargo_file in contracts/*/Cargo.toml; do
            if grep -q "soroban-sdk" "$cargo_file"; then
              if ! grep -q "soroban-sdk = { workspace = true }" "$cargo_file"; then
                echo "‚ùå $cargo_file does not use workspace dependency for soroban-sdk"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All dependency versions are properly aligned with workspace configuration"

  # Combined status check job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [format, clippy, test, build, wasm-check, contract-matrix, dependency-check]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.format.result }}" != "success" || \
                "${{ needs.clippy.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.wasm-check.result }}" != "success" || \
                "${{ needs.contract-matrix.result }}" != "success" || \
                "${{ needs.dependency-check.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"
